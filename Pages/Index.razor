@page "/"

@using InitManager.Data
@using BlazorModal 
@using InitManager.Components
@using Microsoft.AspNetCore.Components
@inject CampaignService CampaignService
@inject NavigationManager navigationManager
@using Microsoft.Maui.Essentials;
@using System.Text.Json;

<div class="d-flex flex-column justify-content-between" style="{width:100%; height:100%;}">
@if (CampaignService.GetCampaigns().Count == 0)
{
    <p role="status">Hey ! it appears that you don't have any campaign yet, start by creating one !</p>
}else {       
    <div class="container-fluid">
        <div class="row row-cols-4 row-cols-lg-5 g-2 g-lg-3">
        @foreach (var c in CampaignService.GetCampaigns())
        {
            <div class="card m-2">
                <div class="card-body">
                    <h3 class="card-title">@c.Name</h3>
                    <ul class="list-group">
                        @foreach (var p in c.Units)
                        {
                            <li class="list-group-item">@p.Name</li>
                        }
                    </ul>
                    <a href="@("/campaign/"+ c.Name)"  class="btn btn-primary mt-2">Details</a>
                </div>
                
            </div>
            
        }
        </div>
    </div>
}
<button  class="btn btn-primary align-self-center" @onclick="OpenModal">Create a Campaign</button>
</div>
<Dialog @ref="dialog" Title="New Campaign">
<EditForm Model="campaign" OnValidSubmit="AddCampaign">
        <DataAnnotationsValidator />
        <ValidationSummary />

    
        <div class="input-group">
            <label class="input-group-text">Campaign Name</label>
            <InputText class="form-control" id="name" @bind-Value="campaign.Name"></InputText>
        </div>

        @for (var i = 0; i < units.Count; i++)
       {
           <PlayerFormItem formId="@i" OnPlayerFormDeleted="RemovePlayer" OnPlayerChanged="PlayerChanged"></PlayerFormItem>
       }

        <button class="btn btn-secondary mt-2" @onclick="AddPlayer" type="button">Add Player</button>
        <hr />
        <button class="btn btn-primary" type="submit">Submit</button>
        @if(!string.IsNullOrEmpty(errorMessage))
        {
        <div class="alert alert-danger mt-2" role="alert">
            @errorMessage
        </div>            
        }

</EditForm>
</Dialog>

@code {

    private Data.Campaign campaign = new();

    private Dialog dialog { get; set; }

    private string errorMessage { get; set; }

    private int playerAdded {get;set;}

    private List<Unit> units { get; set; } = new List<Unit>();

    private void OpenModal() {
        dialog.OpenModal();
    }

    protected override void OnInitialized()
    {
        var c = new HashSet<Data.Campaign>();
        var cs = JsonSerializer.Serialize(c);
        var pref = Preferences.Get("campaigns",cs);
        var campaigns = JsonSerializer.Deserialize<HashSet<Data.Campaign>>(pref);
        CampaignService.SetCampaigns(campaigns);
    }

    private void AddCampaign()
    {
        if (!CampaignService.GetCampaigns().Contains(campaign)) {
            CampaignService.GetCampaigns().Add(campaign);
            campaign = new();
            dialog.CloseModal();
        }else
        {
            errorMessage = "This name is already taken";
        }
        var stringed = JsonSerializer.Serialize(CampaignService.GetCampaigns());
        Preferences.Set("campaigns", stringed);
    }

    private void AddPlayer()
    {
        if (units == null)
        {
            units = new List<Unit>();

        }
        units.Add(new Unit());
    }
    private void RemovePlayer(int id)
    {
        units.RemoveAt(id);
    }

    private void PlayerChanged(Tuple<Unit,int> unit)
    {
        var p = units.ElementAt(unit.Item2);
        Console.WriteLine(unit.Item1);
        p.Name = unit.Item1.Name;
        p.IsPlayer = true;
        p.PlayedBy = unit.Item1.PlayedBy;

        campaign.Units = units;
    }
}

